name: Build precompiled NIFs

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
    branches:
      - main

env:
  DUCKDB_VERSION: "v1.3.1"

jobs:
  build_release:
    name: NIF ${{ matrix.nif }} - ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        nif: ["2.16", "2.15"]
        job:
          - { target: aarch64-apple-darwin, os: macos-latest }
          - { target: x86_64-apple-darwin, os: macos-latest }
          - {
              target: aarch64-unknown-linux-gnu,
              os: ubuntu-22.04,
              use-cross: true,
            }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-22.04 }
          - { target: x86_64-pc-windows-gnu, os: windows-latest }
          - { target: x86_64-pc-windows-msvc, os: windows-latest }

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Extract project version
        shell: bash
        run: |
          # Get the project version from mix.exs
          echo "PROJECT_VERSION=$(sed -n 's/^      version: "\(.*\)",$/\1/p' mix.exs | head -n1)" >> $GITHUB_ENV

      - name: Download and setup DuckDB
        shell: bash
        run: |
          mkdir -p duckdb_sources
          cd duckdb_sources

          # For cross-compilation, we need the HOST library for linking
          # The target library will be packaged separately
          if [[ "${{ matrix.job.os }}" == "windows-latest" ]]; then
            DUCKDB_PLATFORM="windows-amd64"
          elif [[ "${{ matrix.job.os }}" == "macos-latest" ]]; then
            DUCKDB_PLATFORM="osx-universal"
          else
            # Linux - always use amd64 for build host
            DUCKDB_PLATFORM="linux-amd64"
          fi

          echo "Downloading DuckDB for build platform: $DUCKDB_PLATFORM"
          curl -L -f --retry 3 --retry-delay 5 -o duckdb.zip "https://github.com/duckdb/duckdb/releases/download/${DUCKDB_VERSION}/libduckdb-${DUCKDB_PLATFORM}.zip"

          # Validate downloaded file
          echo "Downloaded file info:"
          ls -la duckdb.zip
          file duckdb.zip

          if [[ ! -s duckdb.zip ]]; then
            echo "❌ Downloaded file is empty"
            exit 1
          fi

          if ! file duckdb.zip | grep -q "Zip archive"; then
            echo "❌ Downloaded file is not a valid zip archive"
            echo "File contents:"
            head -c 200 duckdb.zip
            exit 1
          fi

          echo "✅ Zip file is valid, extracting..."
          unzip duckdb.zip
          echo "Extracted files:"
          ls -la

          # For cross-compilation, also download the target library for packaging
          if [[ "${{ matrix.job.use-cross }}" == "true" && "${{ matrix.job.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            echo "Downloading target library for aarch64..."
            mkdir -p ../target_lib
            cd ../target_lib
            curl -L -f --retry 3 --retry-delay 5 -o target_duckdb.zip "https://github.com/duckdb/duckdb/releases/download/${DUCKDB_VERSION}/libduckdb-linux-arm64.zip"

            if [[ ! -s target_duckdb.zip ]]; then
              echo "❌ Target library download failed"
              exit 1
            fi

            unzip target_duckdb.zip
            echo "Target library extracted:"
            ls -la
          fi

      - name: Setup Erlang and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: 26
          elixir-version: 1.16

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          # Install cross-compilation toolchain for aarch64 if needed
          if [[ "${{ matrix.job.use-cross }}" == "true" && "${{ matrix.job.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          # macOS should have necessary build tools

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows should have MSVC or MinGW

      - name: Build NIF
        id: build-crate
        shell: bash
        run: |
          export DUCKDB_LIB_DIR=$(pwd)/duckdb_sources
          export DUCKDB_INCLUDE_DIR=$(pwd)/duckdb_sources

          if [[ "${{ matrix.job.os }}" == "windows-latest" ]]; then
            export DUCKDB_LIB_DIR=$(cygpath -w $(pwd)/duckdb_sources)
            export DUCKDB_INCLUDE_DIR=$(cygpath -w $(pwd)/duckdb_sources)
          fi

          # Set cross-compilation variables if needed
          if [[ "${{ matrix.job.use-cross }}" == "true" && "${{ matrix.job.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            echo "Setting up cross-compilation for aarch64"
            export CC=aarch64-linux-gnu-gcc
            export CFLAGS="$CFLAGS -march=armv8-a"
            echo "Cross-compiler: $CC"
          fi

          # Build the NIF
          make

          # Determine file extensions
          if [[ "${{ matrix.job.os }}" == "windows-latest" ]]; then
            SO_EXT=".dll"
            DYLIB_EXT=".dll"
          elif [[ "${{ matrix.job.os }}" == "macos-latest" ]]; then
            SO_EXT=".so"
            DYLIB_EXT=".dylib"
          else
            SO_EXT=".so"
            DYLIB_EXT=".so"
          fi

          # Create package directory
          PACKAGE_NAME="duckdb_ex-nif-${{ matrix.nif }}-${{ matrix.job.target }}"
          mkdir -p "${PACKAGE_NAME}"

          # Copy NIF
          cp "priv/duckdb_ex${SO_EXT}" "${PACKAGE_NAME}/duckdb_ex${SO_EXT}"

          # Copy DuckDB dynamic library - use target library if available
          if [[ "${{ matrix.job.use-cross }}" == "true" && -d "target_lib" ]]; then
            echo "Using target architecture DuckDB library for packaging"
            cp "target_lib/libduckdb${DYLIB_EXT}" "${PACKAGE_NAME}/libduckdb${DYLIB_EXT}"
          else
            echo "Using build architecture DuckDB library for packaging"
            if [[ "${{ matrix.job.os }}" == "windows-latest" ]]; then
              cp "duckdb_sources/duckdb${DYLIB_EXT}" "${PACKAGE_NAME}/libduckdb${DYLIB_EXT}"
            else
              cp "duckdb_sources/libduckdb${DYLIB_EXT}" "${PACKAGE_NAME}/libduckdb${DYLIB_EXT}"
            fi
          fi

          # Create tarball
          tar -czf "${PACKAGE_NAME}.tar.gz" "${PACKAGE_NAME}"

          echo "file-name=${PACKAGE_NAME}.tar.gz" >> $GITHUB_OUTPUT
          echo "file-path=${PACKAGE_NAME}.tar.gz" >> $GITHUB_OUTPUT

      - name: Artifact upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-crate.outputs.file-name }}
          path: ${{ steps.build-crate.outputs.file-path }}

      - name: Publish archives and packages
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ steps.build-crate.outputs.file-path }}
        if: startsWith(github.ref, 'refs/tags/')
