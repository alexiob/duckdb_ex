name: CI
on: [push, pull_request]
permissions:
  contents: write

jobs:
  report_mix_deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: erlef/mix-dependency-submission@v1

  mix_test:
    name: mix test (OTP ${{matrix.otp}} | Elixir ${{matrix.elixir}})

    env:
      MIX_ENV: test
      # Always force recompilation of NIFs in CI for consistency
      ERL_COMPILER_OPTIONS: deterministic
      # Force DuckDB NIF rebuild - critical for CI reliability
      DUCKDB_EX_FORCE_REBUILD: "1"
      # Enable verbose output for debugging build issues
      VERBOSE: "1"
      # Ensure clean NIF compilation
      MIX_BUILD_EMBEDDED: "true"

    strategy:
      matrix:
        include:
          - elixir: 1.15.8
            otp: 25.3.2.9

          - elixir: 1.18.3
            otp: 27.2
            lint: true

    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake wget curl unzip

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Restore deps cache
        uses: actions/cache@v4
        with:
          path: deps
          key: deps-${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            deps-${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}

      - name: Install dependencies
        run: mix deps.get

      - name: Clean and force rebuild
        run: |
          echo "üßπ Cleaning all previous builds to ensure fresh NIF compilation..."
          mix clean
          mix deps.clean duckdb_ex --build
          # Remove any existing compiled artifacts
          rm -rf priv/duckdb_ex.*
          rm -rf priv/libduckdb.*
          # Force complete clean of DuckDB sources and compiled files
          make clean-all
          echo "‚úÖ Clean completed - forcing fresh NIF build"
        env:
          DUCKDB_EX_FORCE_REBUILD: "1"

      - name: Download and build DuckDB
        run: |
          echo "üì• Downloading DuckDB library for fresh compilation..."
          make download-duckdb
          echo "DuckDB files after download:"
          ls -la duckdb_sources/
          echo "Checking DuckDB library symbols..."
          if [ -f "duckdb_sources/libduckdb.so" ]; then
            nm -D duckdb_sources/libduckdb.so | grep -i duckdb_value || echo "No duckdb_value symbols found"
            ldd duckdb_sources/libduckdb.so || echo "ldd failed"
          fi
          echo "Checking DuckDB header for int8 functions..."
          if [ -f "duckdb_sources/duckdb.h" ]; then
            grep -n "duckdb_value_int8" duckdb_sources/duckdb.h || echo "duckdb_value_int8 not found in header"
          fi

      - name: Compile dependencies
        run: |
          echo "üî® Compiling dependencies with forced NIF rebuild..."
          mix deps.compile
          echo "‚úÖ Dependencies compiled successfully"
        env:
          DUCKDB_EX_FORCE_REBUILD: "1"
          VERBOSE: "1"
          # Additional flags to ensure NIF is rebuilt
          CC: "gcc"
          CFLAGS: "-O2"

      - name: Compile project & lint
        run: |
          echo "üî® Compiling project with linting and forced NIF rebuild..."
          mix compile --warnings-as-errors --force
          echo "‚úÖ Project compiled with linting successfully"
        if: ${{ matrix.lint }}
        env:
          DUCKDB_EX_FORCE_REBUILD: "1"
          VERBOSE: "1"

      - name: Compile project
        run: |
          echo "üî® Compiling project with forced NIF rebuild..."
          mix compile --force
          echo "‚úÖ Project compiled successfully"
        if: ${{ !matrix.lint }}
        env:
          DUCKDB_EX_FORCE_REBUILD: "1"
          VERBOSE: "1"

      - name: Verify NIF compilation
        run: |
          echo "üîç Verifying NIF compilation results..."
          echo "Checking compiled NIF files..."
          find _build -name "*.so" -exec ls -la {} \; || echo "‚ùå No .so files found in _build"
          find priv -name "*" -exec ls -la {} \; || echo "‚ùå No files found in priv"
          echo "Checking DuckDB library files..."
          find duckdb_sources -name "*" -exec ls -la {} \; || echo "‚ùå No duckdb_sources files found"

          echo "üîó Setting up library path for runtime..."
          export LD_LIBRARY_PATH="$(pwd)/priv:$(pwd)/duckdb_sources:$LD_LIBRARY_PATH"
          echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"

          echo "üß™ Testing NIF loading and basic functionality..."
          elixir -e "
            Mix.start()
            Application.ensure_all_started(:duckdb_ex)
            IO.puts('üîß Testing DuckDB NIF...')
            case DuckdbEx.Database.open() do
              {:ok, db} ->
                IO.puts('‚úÖ DuckDB NIF loaded and database opened successfully!')
                {:ok, conn} = DuckdbEx.Connection.open(db)
                {:ok, result} = DuckdbEx.query(conn, 'SELECT 42 as test')
                IO.puts('‚úÖ Basic query executed successfully: #{inspect(result.rows)}')
                DuckdbEx.Connection.close(conn)
                DuckdbEx.Database.close(db)
                IO.puts('‚úÖ All basic operations completed successfully')
              {:error, reason} ->
                IO.puts('‚ùå Failed to open DuckDB: #{inspect(reason)}')
                System.halt(1)
            end
          " || (echo "‚ùå DuckDB NIF test failed" && exit 1)
        env:
          LD_LIBRARY_PATH: "${{ github.workspace }}/priv:${{ github.workspace }}/duckdb_sources:$LD_LIBRARY_PATH"

      - name: Run tests
        run: |
          echo "üß™ Running test suite with forced NIF rebuild..."
          mix test --max-failures 10 --timeout 300000
          echo "‚úÖ All tests completed"
        env:
          LD_LIBRARY_PATH: "${{ github.workspace }}/priv:${{ github.workspace }}/duckdb_sources:$LD_LIBRARY_PATH"
          DUCKDB_EX_FORCE_REBUILD: "1"
